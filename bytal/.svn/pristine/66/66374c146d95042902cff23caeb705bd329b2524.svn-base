package org.bytal.presentation;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.bytal.domain.Member;
import org.bytal.domain.Rent;
import org.bytal.service.deviceService.DeviceService;
import org.bytal.service.webService.WebMemberService;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

@Controller
@RequestMapping(value = "/bytal")
public class WebController {
	@Resource
	private WebMemberService webMemberService;
	@Resource
	private DeviceService deviceService;
	
	/* 메인페이지 호출 */
	@RequestMapping(value = "/main", method = RequestMethod.GET)
	public String main() throws Exception {
		return "/web/main/main";
	}
	
	/* 회원가입  */
	@RequestMapping(value = "/join", method = RequestMethod.POST)
	public ModelAndView add(Member member) throws Exception {
		RedirectView redirectView = new RedirectView("/bytal/main");
		redirectView.setExposeModelAttributes(false);
		
		this.webMemberService.add(member);
		
		return new ModelAndView(redirectView);
	}
	
	/* 회원가입창 호출  */
	@RequestMapping(value = "/join", method = RequestMethod.GET)
	public String joinForm() throws Exception {
		return "/web/member/join";
	}
	
	/* 로그인처리  */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public ModelAndView login(HttpSession session, 
			HttpServletRequest request) throws Exception {
		RedirectView redirectView = new RedirectView("/bytal/main");
		redirectView.setExposeModelAttributes(false);
		
		Member member = new Member();
		member.setMemberNo(request.getParameter("id"));
		member.setPassword(request.getParameter("password"));
		
		Member loginMember = webMemberService.view(member);
		if(loginMember != null){
		session.setAttribute("memberName", loginMember.getMemberName());
		session.setAttribute("memberNo", loginMember.getMemberNo());
		session.setAttribute("password", loginMember.getPassword());
			return new ModelAndView(redirectView);
		}else{
			request.setAttribute("noInfo","정보가없다");
			return new ModelAndView("/web/member/login");
		}
	}
	
	/* 로그인창 호출  */
	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String loginForm() throws Exception {
		return "/web/member/login";
	}
	
	/* 로그아웃 처리 */
	@RequestMapping(value = "/logout", method = RequestMethod.GET)
	public String logout(HttpSession session) throws Exception {
		session.removeAttribute("memberNo");
		session.removeAttribute("memberName");
		session.removeAttribute("password");
		return "/web/main/main";
	}
	
	/* 아이디 중복 체크 팝업 창 호출 */
	@RequestMapping(value = "/checkId",method = RequestMethod.GET)
	public String checkIdForm() throws Exception {
		return "/web/member/checkId";
	}
	
	/* 아이디 중복 체크 처리 */
	@RequestMapping(value = "/checkId",method = RequestMethod.POST)
	public ModelAndView checkId(Member member, HttpServletRequest request) throws Exception {
		ModelAndView modelAndView = new ModelAndView("/web/member/checkId");
		member.setMemberNo(request.getParameter("memberNo"));
		
		if(this.webMemberService.view(member) != null){
			modelAndView.addObject("resultCheckId", member.getMemberNo()+"은(는) 사용 중 입니다.");
		} else {
			modelAndView.addObject("resultCheckId", member.getMemberNo()+"은(는) 사용 가능합니다.");
		}
		return modelAndView;
	}
	
	/* 아이디/비밀번호 찾기창 호출 */
	@RequestMapping(value = "/searchId", method = RequestMethod.GET)
	public String searchIdForm() throws Exception {
		return "/web/member/searchId";
	}
	
	/* 아이디/비밀번호 찾기 처리 */ 
	@RequestMapping(value = "/searchId", method = RequestMethod.POST)
	public ModelAndView searchId(Member member, HttpServletRequest request) throws Exception {
		ModelAndView modelAndView = new ModelAndView("/web/member/searchId");
		Member searchMember = new Member();
		if(request.getParameter("memberNo") == null) {
			searchMember = this.webMemberService.view(member);
			
			if(searchMember != null && searchMember.getMemberNo() != null) {
				modelAndView.addObject("resultId", searchMember.getMemberNo());
			} else {
				modelAndView.addObject("resultId", "아이디를 찾을 수 없습니다.");
			}
		} else {
			searchMember = this.webMemberService.view(member);
			
			if(searchMember != null && searchMember.getPassword() != null) {
				modelAndView.addObject("resultPassword", searchMember.getPassword());
			} else {
				modelAndView.addObject("resultPassword", "비밀번호를 찾을 수 없습니다.");
			}
		}
		
		return modelAndView;
	}
	
	/* 회원 정보 수정 비밀번호 확인 폼 호출 */
	@RequestMapping(value = "/editMemberCheck", method = RequestMethod.GET)
	public String editMemberCheckForm() throws Exception {
		return "/web/member/editMemberCheck";
	}
	
	/* 회원 정보 수정 비밀번호 확인 처리 */
	@RequestMapping(value = "/editMemberCheck", method = RequestMethod.POST)
	public ModelAndView editMemberCheck(HttpServletRequest request) throws Exception {
		RedirectView redirectView; 
			
		if(request.getParameter("password").equals(request.getSession().getAttribute("password"))){
			redirectView = new RedirectView("/bytal/editMember");
		} else {
			redirectView = new RedirectView("/bytal/editMemberCheck");
		}
		
		redirectView.setExposeModelAttributes(false);
		
		return new ModelAndView(redirectView);
	}
	
	/* 회원정보 수정 폼 호출 */
	@RequestMapping(value = "/editMember", method = RequestMethod.GET)
	public ModelAndView editMemberForm(Member member, HttpServletRequest request) throws Exception {
		ModelAndView modelAndView = new ModelAndView("/web/member/editMember");
		
		member.setMemberNo((String)request.getSession().getAttribute("memberNo"));
		
		modelAndView.addObject("member", this.webMemberService.view(member));
		
		return modelAndView;
	}
	
	/* 회원정보 수정 처리 */
	@RequestMapping(value = "/editMember", method = RequestMethod.POST)
	public ModelAndView editMember(Member member, HttpServletRequest request, HttpSession session) throws Exception {
		RedirectView redirectView = new RedirectView("/bytal/main");
		redirectView.setExposeModelAttributes(false);

		member.setMemberNo((String)request.getSession().getAttribute("memberNo"));
		
		this.webMemberService.edit(member);
		session.setAttribute("memberName", member.getMemberName());
		session.setAttribute("password", member.getPassword());
		
		return new ModelAndView(redirectView);
	}
	
	/* 회원탈퇴 처리 */
	@RequestMapping(value = "/withdraw", method = RequestMethod.GET)
	public ModelAndView withdraw(Member member, HttpSession session) throws Exception {
		RedirectView redirectView = new RedirectView("/bytal/main");
		redirectView.setExposeModelAttributes(false);
		
		member.setMemberNo((String)session.getAttribute("memberNo"));
		this.webMemberService.remove(member);
		
		session.removeAttribute("memberNo");
		session.removeAttribute("memberName");
		session.removeAttribute("password");
		
		return new ModelAndView(redirectView);
	}
	
	/* 관리자용 회원 목록 조회 */
	@RequestMapping(value = "/listMember", method = RequestMethod.GET)
	public ModelAndView listMember() throws Exception {
		ModelAndView modelAndView = new ModelAndView("/web/member/listMember");
		
		List<Member> listMember = this.webMemberService.find();
		modelAndView.addObject("listMember", listMember);
		
		return modelAndView;
	}
	
	/* 회원 상세 조회 */
	@RequestMapping(value = "/viewMember/{memberNo}", method = RequestMethod.GET)
	public ModelAndView viewMember(@PathVariable String memberNo)throws Exception {
		ModelAndView modelAndView = new ModelAndView("/web/member/viewMember");
		
		Member member = new Member();
		member.setMemberNo(memberNo);
		member = this.webMemberService.view(member);
		
		Rent rent = new Rent();
		rent.setMemberNo(memberNo);
		rent = this.deviceService.view(rent);
		
		modelAndView.addObject("member", member);
		modelAndView.addObject("rent", rent);
		
		return modelAndView;
	}
	
	/* 회원 강퇴 처리 */
	@RequestMapping(value = "/withdrawMember/{memberNo}", method = RequestMethod.GET)
	public ModelAndView withdrawMember(@PathVariable String memberNo) throws Exception {
		RedirectView redirectView = new RedirectView("/bytal/listMember");
		redirectView.setExposeModelAttributes(false);
		
		Member member = new Member();
		member.setMemberNo(memberNo);
		this.webMemberService.remove(member);
		
		return new ModelAndView(redirectView);
	}
	
	/* 인터셉터 알림창 */
	@RequestMapping(value = "/error")
	public ModelAndView error() throws Exception{
		ModelAndView mv = new ModelAndView("/web/main/main");
		
		StringBuffer stb = new StringBuffer();
		
		stb.append("<script language='javascript'>")
		.append("alert('관리자만 접속가능 합니다.')")
		.append("</script>");
		
		mv.addObject("abc",stb.toString());
		return mv;
	}
}
